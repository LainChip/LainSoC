[tasks]
bmcsreg		bmc opt_sreg
bmcfifo		bmc
bmcsreglp	bmc opt_sreg opt_lowpower
bmcfifolp	bmc          opt_lowpower
bmcsreglat	bmc opt_sreg              opt_low_latency
bmcfifolat	bmc                       opt_low_latency
bmcsreglatlp	bmc opt_sreg opt_lowpower opt_low_latency
bmcfifolatlp	bmc          opt_lowpower opt_low_latency
cvrsreg		cvr opt_sreg                                      # 34 steps
cvrfifo		cvr					  cvrfifo # 21 steps
cvrsreglp	cvr opt_sreg opt_lowpower                         # 34 steps
cvrfifolp	cvr          opt_lowpower                 cvrfifo # 21 steps
cvrsreglat	cvr opt_sreg              opt_low_latency         # 34 steps
cvrfifolat	cvr                       opt_low_latency cvrfifo
cvrsreglatlp	cvr opt_sreg opt_lowpower opt_low_latency
cvrfifolatlp	cvr          opt_lowpower opt_low_latency cvrfifo

[options]
bmc: mode bmc
bmc: depth 40
cvr: mode cover
cvr: depth 40
# bmcsreg: 18 steps of BMC takes 19 hrs
# bmcfifo: 22 steps of BMC takes 16 hrs
# bmcsreglp: 18 steps of BMC takes 17 hrs
# bmcfifolp: 23 steps of BMC takes 20 hrs

[engines]
# smtbmc
smtbmc boolector

[script]
cvrfifo: read -define SFIFO
read -formal sfifo.v
read -formal axi3reorder.v
--pycode-begin--
cmd = "hierarchy -top axi3reorder -chparam DW 8 -chparam OPT_LGWFIFO 2"
cmd += " -chparam C_AXI_ID_WIDTH 2"
cmd += " -chparam OPT_METHOD      %d" % (1 if "opt_sreg" in tags else 2)
cmd += " -chparam OPT_LOWPOWER    %d" % (1 if "opt_lowpower" in tags else 0)
cmd += " -chparam OPT_LOW_LATENCY %d" % (1 if "opt_low_latency" in tags else 0)
output(cmd)
--pycode-end--
prep -top axi3reorder

[files]
../../rtl/sfifo.v
../../rtl/axi3reorder.v
